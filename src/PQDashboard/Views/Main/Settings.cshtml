@*******************************************************************************************************
    //  Settings.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/22/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using GSF.Collections;
@using GSF.Data.Model
@using GSF.Data
@using GSF.Web.Model
@using PQDashboard.Model
@using Newtonsoft.Json
@using openXDA.Model
@model AppModel
@{
    Layout = "";
    int meterCount;

    IEnumerable<ValueList> kml;
    IEnumerable<ValueList> tabs;
    IEnumerable<ValueList> systemSettings;
    IEnumerable<ValueListGroup> chartGroups;
    IEnumerable<ValueList> chartSettings;

    using (AdoDataConnection connection = new AdoDataConnection("systemSettings")) {
        tabs = new TableOperations<ValueList>(connection).QueryRecordsWhere("GroupID = (SELECT ID FROM ValueListGroup WHERE Name = 'Tabs')");
        systemSettings = new TableOperations<ValueList>(connection).QueryRecordsWhere("GroupID = (SELECT ID FROM ValueListGroup WHERE Name = 'System')");
        kml = new TableOperations<ValueList>(connection).QueryRecordsWhere("GroupID = (SELECT ID FROM ValueListGroup WHERE Name = 'KML')");
        chartGroups = new TableOperations<ValueListGroup>(connection).QueryRecordsWhere("Name LIKE 'Chart.%'");
        chartSettings = new TableOperations<ValueList>(connection).QueryRecordsWhere("GroupID IN (SELECT ID FROM ValueListGroup WHERE Name LIKE 'Chart.%')");
    }
    using (DataContext dataContext = new DataContext("dbOpenXDA")) {
        meterCount = dataContext.Table<Meter>().QueryRecordCount(new RecordRestriction("ID IN (SELECT MeterID FROM MeterAssetGroup WHERE AssetGroupID IN (SELECT AssetGroupID FROM UserAccountAssetGroup WHERE UserAccountID =  (SELECT ID FROM UserAccount WHERE Name = {0})))", ViewBag.usersid));
    }


}
<div id="settingsModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">The Open PQDashboard version 2.0</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#about" data-toggle="tab">About</a></li>
                    <li><a href="#config" data-toggle="tab">Config</a></li>
                    <li><a href="#help" data-toggle="tab">Help</a></li>
                </ul>
                <div class="tab-content">
                    <div id="config" class="tab-pane fade" style="overflow-y:auto; max-height: 750px">
                        <h3 class="modal-title"><img src="~/Images/ConfigImages/tools.png" style="height:30px" />&nbsp;&nbsp;Settings</h3>
                        <em>Settings are automatically udpated after a change is made.  To see results the browser must be refreshed. Click below to refresh immediately.</em>

                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#systemSettings" data-toggle="tab">System</a></li>
                            <li><a href="#tabs" data-toggle="tab">Tabs</a></li>
                            @foreach (ValueListGroup setting in chartGroups)
                            {
                                <li><a href="#@setting.Name.ToLower().Replace(".","_")" data-toggle="tab">@setting.Name.Replace("Chart.", "")</a></li>
                            }
                            <li><a href="#kml" data-toggle="tab">KML</a></li>
                        </ul>
                        <div class="tab-content">
                            <div id="systemSettings" class="tab-pane fade in active">
                                <div class="well">
                                    <table class="table table-responsive">
                                        <thead>
                                            <tr>
                                                <th>Setting</th>
                                                <th>Value</th>
                                            </tr>
                                        </thead>
                                        @foreach (ValueList setting in systemSettings)
                                        {
                                            <tr>
                                                <td>
                                                    @setting.Text
                                                </td>
                                                <td>
                                                    <input type="text" onchange="updateSystemSetting(this, @JsonConvert.SerializeObject(setting))" value="@setting.AltText1"/>
                                                </td>
                                            </tr>
                                        }
                                    </table>
                                </div>
                            </div>

                            <div id="tabs" class="tab-pane fade">
                                <div class="well">
                                    <table class="table table-responsive">
                                        <thead>
                                            <tr>
                                                <th>Tab</th>
                                                <th>Enabled</th>
                                            </tr>
                                        </thead>
                                        @foreach (ValueList tab in tabs)
                                        {
                                                <tr>
                                                    <td>
                                                        @tab.Text
                                                    </td>
                                                    <td>
                                                        <input id="tab@(tab.ID)" type="checkbox" onchange="updateTabSetting(this, @JsonConvert.SerializeObject(tab))" @(tab.Enabled == true ? "checked='checked'" : "") />
                                                    </td>
                                                </tr>
                                        }
                                    </table>
                                </div>
                            </div>

                            @foreach (ValueListGroup chartGroup in chartGroups)
                            {
                                    <div id="@chartGroup.Name.ToLower().Replace(".","_")" class="tab-pane fade">
                                        <div class="well">
                                            <table class="table table-responsive">
                                                <thead>
                                                    <tr>
                                                        <th>Field</th>
                                                        <th>Color</th>
                                                        <th>Enabled</th>
                                                    </tr>
                                                </thead>
                                                @foreach (ValueList setting in chartSettings.Where(x=> x.GroupID == chartGroup.ID))
                                                {
                                                    <tr>
                                                        <td>
                                                            @setting.Text
                                                        </td>
                                                        <td>
                                                            <input id="color@(setting.ID)" style="background-color: @(setting.AltText1)" onchange="updateColorSetting(this, @JsonConvert.SerializeObject(setting))" value="@(setting.AltText1)" />
                                                        </td>
                                                        <td>
                                                            <input id="enable@(setting.ID)" onchange="updateEnableSetting(this, @JsonConvert.SerializeObject(setting))" type="checkbox" @(setting.Enabled== true  ? "checked='checked'" : "") />
                                                        </td>
                                                    </tr>
                                                }
                                            </table>
                                        </div>
                                    </div>
                            }

                            <div id="kml" class="tab-pane fade">
                                <div class="well">
                                    <table class="table table-responsive">
                                        <thead>
                                            <tr>
                                                <th>File</th>
                                                <th>Enabled</th>
                                            </tr>
                                        </thead>
                                        @foreach (ValueList setting in kml)
                                        {
                                            <tr>
                                                <td>
                                                    @setting.Text
                                                </td>
                                                <td>
                                                    <input id="tab@(setting.ID)" type="checkbox" onchange="updateKMLSetting(this, @JsonConvert.SerializeObject(setting))" @(setting.Enabled== true  ? "checked='checked'" : "") />
                                                </td>
                                            </tr>
                                        }
                                    </table>

                                </div>
                            </div>

                        </div>
                    </div>

                    <div id="about" class="tab-pane fade in active">
                        <h3><a href="http://gridprotectionalliance.org/default.asp" target="_blank"><img src="~/Images/ConfigImages/lock.png" style="height:30px" /></a>&nbsp;&nbsp;About the Open PQDashboard</h3>
                        <br />
                        <p>
                            The PQ Dashboard enables the visualization of findings and insights derived from event waveforms and power system trending data that are housed within GPA’s <a href="http://github.com/GridProtectionAlliance/openXDA" target="_blank" style="color:blue;">openXDA solution.</a><br />
                            Development of the PQ Dashboard has been largely funded by the Electric Power Research Institute (EPRI).
                        </p>
                        <p>
                            For information on updates and to log issues and make suggestions for improvements, go to the <a href="http://github.com/GridProtectionAlliance/PQDashboard" target="_blank" style="color:blue;">PQ Dashboard GitHub repository.</a>
                        </p>
                        <p>
                            GPA offers annual product support agreements for the Open PQ Dashboard and openXDA as well as customized services that are tailored to meet the needs of individual utilities. <br />
                            For more information about GPA’s support and maintenance services, please contact us at:
                        </p>
                        <p>
                            1206 Broad Street <br />
                            Chattanooga, TN 34702 <br />
                            Phone: (423) 702-8136 <br />
                            Email: <a href="mailto:info@gridprotectionalliance.org?subject=Contact%20GPA" style="color:blue;">info@gridprotectionalliance.org</a>
                        </p>
                    </div>

                    <div id="help" class="tab-pane fade" style="overflow-y:auto; max-height: 750px">
                        <h3 class="modal-title"><img src="~/Images/ConfigImages/qmark.png" style="height:30px" />&nbsp;&nbsp;PQDashboard Help</h3>
                        <br />

                        <h4><b>How to configure the dashboard</b></h4>

                        <br /><br />
                        <table class="table-bordered">
                            <tr> <th colspan="2">Description of configuration settings</th> </tr>
                            <tr>
                                <td width="20%"><b>Tabs</b></td>
                                <td>Hide or show available tabs</td>
                            </tr>
                            <tr>
                                <td width="20%"><b>Correctness</b></td>
                                <td>Configure the color and visibility of available correctness levels</td>
                            </tr>
                            <tr>
                                <td width="20%"><b>Events</b></td>
                                <td>Configure the color and visibility of different event types.</td>
                            </tr>
                            <tr>
                                <td width="20%"><b>Completeness</b></td>
                                <td>Configure the color and visibility of available completeness levels</td>
                            </tr>
                            <tr>
                                <td width="20%"><b>Trending</b></td>
                                <td>Configure the color and visibility of trending data types</td>
                            </tr>
                            <tr>
                                <td width="20%"><b>Breakers</b></td>
                                <td>Configure the color and visibility of different breaker event types</td>
                            </tr>
                            <tr>
                                <td width="20%"><b>Disturbances</b></td>
                                <td>Configure the color and visibility of different types of disturbances</td>
                            </tr>
                            <tr>
                                <td width="20%"><b>Faults</b></td>
                                <td>Configure the color and visibility of different types of events</td>
                            </tr>
                        </table>

                        <br /><br />
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" id="configApply" class="btn btn-primary" data-dismiss="modal" onclick="refresh()">Apply Now</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script>
    var kmlData = @Html.Raw(JsonConvert.SerializeObject(kml.Where(x => x.Enabled == true ).FirstOrDefault()));
    var pendingUpdates = {};

    function refresh() {
        var pendingUpdatesList = Object.keys(pendingUpdates).map(function (key) { return pendingUpdates[key]; });

        $.when.apply(null, pendingUpdatesList).done(function () {
            location.reload();
        });
    }

    function updateSetting(key, valueList) {
        var pendingUpdate = pendingUpdates[key];
        var deferred = $.Deferred();
        pendingUpdates[key] = deferred;

        function callUpdateSettings() {
            $.post(homePath + 'api/Settings', valueList, function () { }).always(deferred.resolve);
        }

        if (pendingUpdate)
            pendingUpdate.done(callUpdateSettings);
        else
            callUpdateSettings();
    }


    function updateTabSetting(input, setting) {
        var key = setting.Text + input.checked;
        setting.Enabled = input.checked;
        updateSetting(key, setting);
    }
  
    function updateSystemSetting(input, setting) {
        var key = setting.Text;
        setting.AltText1 = input.value;
        updateSetting(key, setting);
    }

    function updateColorSetting(input, setting) {
        var key = setting.Text + setting.AltText1;
        $(input).css('background-color', input.value);
        setting.AltText1 = input.value;
        updateSetting(key, setting);
    }

    function updateEnableSetting(input, setting) {
        var key = setting.Text + setting.Value;
        setting.Enabled = input.checked;
        updateSetting(key, setting);
    }

    function updateKMLSetting(input, setting) {
        var key = setting.Text + setting.Value;
        setting.Enabled = input.checked;
        updateSetting(key, setting);
    }

</script>