@*//******************************************************************************************************
//  UpdateSettings.cshtml - Gbtc
//
//  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/31/2018 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@

@using System.Data
@using GSF.Data
@using GSF.Data.Model
@using GSF.Web.Model
@using openXDA.Model
@using PQDashboard.Model

@model AppModel
@{
    Layout = "";
    DataContext dataContext = Model.DataContext;

    Dictionary<string, string> carrierList = new Dictionary<string, string>()
    {
        { "Alltel", "message.alltelwireless.com" },
        { "AT&T", "txt.att.net" },
        { "Boost Mobile", "myboostmobile.com" },
        { "Cricket Wireless", "mms.cricketwireless.net" },
        { "Sprint", "messaging.sprintpcs.com" },
        { "T-Mobile", "tmomail.net" },
        { "U.S. Cellular", "email.uscc.net" },
        { "Verizon", "vtext.com" },
        { "Virgin Mobile", "vmobl.com" },
        { "Republic Wireless", "text.republicwireless.com" }
    };

    if (ViewBag.account == null)
    {
        ViewBag.account = new ConfirmableUserAccount();
        ViewBag.account.Name = "";
        ViewBag.account.Email = "";
        ViewBag.account.Phone = "";
    }

    bool emailUnconfirmed =
        !string.IsNullOrEmpty(ViewBag.account.Email) &&
        !ViewBag.account.EmailConfirmed;

    bool phoneUnconfirmed =
        !string.IsNullOrEmpty(ViewBag.account.Phone) &&
        !ViewBag.account.PhoneConfirmed;

    string xslTemplateQuery =
        "SELECT " +
        "    EmailType.ID, " +
        "    XSLTemplate.Name, " +
        "    NULL AS Template, " +
        "    EmailType.SMS " +
        "FROM " +
        "    XSLTemplate JOIN " +
        "    EmailType ON EmailType.XSLTemplateID = XSLTemplate.ID JOIN " +
        "    EmailCategory ON EmailType.EmailCategoryID = EmailCategory.ID JOIN " +
        "    EventEmailParameters ON EventEmailParameters.EmailTypeID = EmailType.ID " +
        "WHERE EmailCategory.Name = 'Event' " +
        "ORDER BY XSLTemplate.Name";

    TableOperations<XSLTemplate> xslTemplateTable = dataContext.Table<XSLTemplate>();
    TableOperations<EmailType> emailTypeTable = dataContext.Table<EmailType>();
    DataRow[] xslTemplates = dataContext.Connection.RetrieveData(xslTemplateQuery).Select();

    List<XSLTemplate> jobTemplates = xslTemplates
        .Where(row => !row.ConvertField<bool>("SMS"))
        .Select(row => xslTemplateTable.LoadRecord(row))
        .ToList();

    List<XSLTemplate> smsTemplates = xslTemplates
        .Where(row => row.ConvertField<bool>("SMS"))
        .Select(row => xslTemplateTable.LoadRecord(row))
        .ToList();

    List<AssetGroup> regions = dataContext.Table<AssetGroup>().QueryRecords("Name").ToList();

    Guid userAccountID = ViewBag.account.ID;
    List<UserAccountAssetGroup> userRegions = dataContext.Table<UserAccountAssetGroup>().QueryRecordsWhere("UserAccountID = {0} AND Email <> 0", userAccountID).ToList();
    List<EmailType> userEmails = dataContext.Table<EmailType>().QueryRecordsWhere("ID IN (SELECT EmailTypeID from UserAccountEmailType WHERE UserAccountID = {0} AND EmailTypeID IN (SELECT ID FROM EmailType WHERE SMS = 0))", userAccountID).ToList();
    List<EmailType> userSMS = dataContext.Table<EmailType>().QueryRecordsWhere("ID IN (SELECT EmailTypeID from UserAccountEmailType WHERE UserAccountID = {0} AND EmailTypeID IN (SELECT ID FROM EmailType WHERE SMS <> 0))", userAccountID).ToList();

    string[] phoneParts = ViewBag.account.Phone?.Split('@');
    string phone = phoneParts?[0];
    string carrier = "";

    if (phoneParts?.Length == 2)
    {
        carrier = phoneParts[1];
    }

    if (phone?.Length == 10)
    {
        string areaCode = phone.Substring(0, 3);
        string group1 = phone.Substring(3, 3);
        string group2 = phone.Substring(6, 4);
        phone = "(" + areaCode + ") " + group1 + "-" + group2;
    }

    if (!string.IsNullOrEmpty(carrier) && !carrierList.Values.Contains(carrier))
    {
        carrierList.Add("Unknown Carrier", carrier);
    }

    string contentPath = Server.MapPath("~/override/UpdateSettings.content");
    string content = null;

    if (File.Exists(contentPath))
    {
        content = File.ReadAllText(contentPath);
    }
}
@helper DefaultContent(string company)
{
    <p>
        This page is used to sign up for and manage the self subscription email service. Once you submit your request
        you will need to verify your email address and, if applicable, your phone number. You will begin receiving emails and
        messages from openXDA once you have been approved by the system administrator.
    </p>

    <p>
        <b>*** The notifications you receive contain @Html.Raw(company) Operation Sensitive Data and should not
        be shared or forwarded to ANYONE without expressed permission. ***</b>
    </p>

    <p>
        You only need to provide a cell phone number if you wish to receive SMS messages. Selecting "None" for the email template field will unsubscribe you from emails.
        Selecting "None" for the SMS template field will unsubscribe you from SMS messages.
    </p>
}

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Update Email Settings</title>
    @Styles.Render("~/Content/bootstrap/bootstrap")
    @Scripts.Render("~/Scripts/jquery")
    @Scripts.Render("~/Scripts/bootstrap")
    @Scripts.Render("~/Scripts/bootstrap-fullscreen-select")

    <style>
        .invalid {
            border: 5px solid #ffdddd;
        }
    </style>
</head>

<body>
    <div class="container">
        @if (ViewBag.isRegistered)
        {
            <h1>Update openXDA Email Settings - @ViewBag.username</h1>
        }
        else
        {
            <h1>Sign Up for openXDA Emails - @ViewBag.username</h1>
        }
        <hr />
        <div class="well">
            <form action="./HandleUpdateSettingForm" method="post">
                @AntiForgery.GetHtml()

                @if (content != null)
                {
                    @Html.Raw(content)
                }
                else
                {
                    @DefaultContent(Model.Global.CompanyAcronym)
                }

                <hr />

                @if (ViewBag.isRegistered && !ViewBag.account.Approved)
                {
                    <div class="well">
                        <p style="color: red; font: bold">
                            Your account has not been approved. You will not receive any emails until an administrator has approved your registration.
                        </p>
                    </div>
                }
                @if (emailUnconfirmed || phoneUnconfirmed)
                {
                    <div class="well">
                        <p style="color:red; font:bold">
                            Unconfirmed emails and sms numbers will not be able to recieve messages until they have
                            been confirmed. A confirmation number has been sent to your email address and sms number and
                            can be enter by following the appropriate verify link.
                        </p>
                        <ul>
                            @if (emailUnconfirmed)
                            {
                                <li><span style="color:red; font-weight:bold">Email Unverified...&nbsp;&nbsp;&nbsp;</span><a href="./Verify/email">Verify</a></li>
                            }
                            @if (phoneUnconfirmed)
                            {
                                <li><span style="color:red; font-weight:bold">SMS Unverified...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="./Verify/sms">Verify</a></li>
                            }
                        </ul>
                    </div>
                }
                <input name="username" value="@ViewBag.username" hidden />
                <input name="sid" value="@ViewBag.usersid" hidden />
                <div class="form-group">
                    <label for="email">Email address:</label>
                    <input type="email" class="form-control" name="email" value="@ViewBag.email" disabled>
                </div>
                <div class="form-group">
                    <label for="phone">Cell Number: </label>
                    <input type="text" class="form-control" name="phone" value="@phone">
                </div>
                <div class="form-group">
                    <label for="carrier">Cell Carrier:</label>
                    <select class="form-control" name="carrier">
                        <option value="0">--Please Select--</option>

                        @foreach (KeyValuePair<string, string> kvp in carrierList)
                        {
                            <option value="@kvp.Value" @(kvp.Value == carrier ? "selected" : null)>@kvp.Key</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="region">Region:</label>
                    <select class="form-control mobileSelect" name="region" multiple>
                        @foreach (AssetGroup region in regions)
                        {
                            <option value="@region.ID" @(userRegions.Select(x => x.AssetGroupID).Contains( region.ID) ? "selected" : null)>@region.Name</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="job">Email Template (Select by Job Title):</label>
                    <select class="form-control mobileSelect" name="job" multiple>
                        @foreach (XSLTemplate jobTemplate in jobTemplates)
                        {
                            <option value="@jobTemplate.ID" @(userEmails.Select(x => x.ID).Contains( jobTemplate.ID) ? "selected" : null)>@jobTemplate.Name</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="sms">SMS Template (Select by Job Title):</label>
                    <select class="form-control mobileSelect" name="sms" multiple>
                        @foreach (XSLTemplate smsTemplate in smsTemplates)
                        {
                            <option value="@smsTemplate.ID" @(userSMS.Select(x => x.ID).Contains( smsTemplate.ID) ? "selected" : null)>@smsTemplate.Name</option>
                        }
                    </select>
                </div>
                @if (!ViewBag.isRegistered)
                {
                    <input type="submit" name="submit" value="Sign Up" class="btn btn-default" />
                }
                @if (ViewBag.isRegistered)
                {
                    <input type="submit" name="submit" value="Update" class="btn btn-default" />
                    <input type="submit" name="submit" value="Unsubscribe" class="btn btn-default" />
                }

            </form>
        </div>
    </div>

    <script>
        var phoneRegex = /(^(\+0?1\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$)|(^\d{10}$)/gm;
        var mobileSelectOptions = {
            filterable: true,
            padding: {
                top: '5%',
                left: '15%',
                right: '15%',
                bottom: '5%'
            }
        };

        $(function () {
            var submitter = null;

            $("form").on("submit", function () {
                var phoneInput = $("input[name='phone']");
                var phone = phoneInput.val();
                phone = phone.replace(/[^0-9]/g, '');

                if (phone.length !== 10 && phone.length !== 0)
                    return false;

                if (submitter.val() === "Unsubscribe") {
                    if (!confirm("You are about to unsubscribe from all email and SMS notifications. Are you sure you would like to continue?"))
                        return false;
                }

                phoneInput.val(phone);
            });

            $('input[type="submit"]').click(function () {
                submitter = $(this);
            });

            $('input[name="phone"]').keyup(function () {
                if ($(this).val() == "") {
                    $(this).removeClass('invalid');
                    $('input[name="submit"]').prop('disabled', false);
                }
                else if ($(this).val().match(phoneRegex)) {
                    $(this).removeClass('invalid');
                    $('input[name="submit"]').prop('disabled', false);

                }
                else {
                    $(this).addClass('invalid');
                    $('input[name="submit"]').prop('disabled', true);
                }
            });

            $('.mobileSelect').mobileSelect(mobileSelectOptions);
            $('.btn-mobileSelect-gen').addClass('form-control')
        });
    </script>
</body>
</html>
<script>
    $('.container').height(window.innerHeight);
</script>
