@*//******************************************************************************************************
    //  QuickSearch.cshtml - Gbtc
    //
    //  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
    //  not use this file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/10/2017 - Billy Ernest
    //       Generated original version of source code.
    //
    //*******************************************************************************************************@
@using System.Collections.Specialized
@using GSF.Data
@using GSF.Data.Model
@using GSF.Web.Model
@using PQDashboard.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;

    Layout = null;
    string xdaInstance = dataContext.Connection.ExecuteScalar<string>("SELECT Value FROM DashSettings WHERE Name = 'System.XDAInstance'");
    string timeWindow = dataContext.Connection.ExecuteScalar<string>("SELECT Value FROM DashSettings WHERE Name = 'System.TimeWindow'") ?? "1";

}
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head id="Head1">
    <title>QuickSearch</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <link rel="shortcut icon" type="image/ico" href="~/favicon.ico" />
    <link rel="stylesheet" href="~/Content/bootstrap/theme.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/font-awesome.css" />
    <link rel="stylesheet" href="~/Content/bootstrap-3.3.2.min.css" />
    <link rel="stylesheet" href="~/Content/themes/redmond/jquery-ui.css" />
    <link rel="stylesheet" href="~/Scripts/PrimeUI/primeui.min.css" />
    <link rel="stylesheet" href="~/Content/MeterEventsByLine.css" type="text/css" />
    <link rel="stylesheet" href="~/Content/jquery.jspanel.min.css" />
    <link rel="stylesheet" href="~/Content/daterangepicker.css" />

    <style>
        .vertical-menu {
            width: 250px; /* Set a width if you like */
            height: inherit;
            background-color: #86b6da;
            position: relative;
            float: left;
            padding: 10px;
            color: white;   
        }

        body {
            overflow-y: hidden;
        }

        .screen {
            position: absolute;
        }
        #chartsDiv {
            overflow-y: auto;
            width: calc(100% - 250px);
            height: 100%;
            max-height: calc(100%);
        }

    </style>

    <script type="text/javascript" src="~/Scripts/jquery-3.3.1.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.signalR.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.blockUI.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap-3.3.2.min.js"></script>
    <script type="text/javascript" src="~/Scripts/PrimeUI/primeui.js"></script>
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript" src="~/Scripts/jquery.jspanel-compiled.js"></script>
    <script type="text/javascript" src="~/Scripts/Site.js"></script>
    <script type="text/javascript" src="~/Scripts/jstorage.js"></script>
    @Scripts.Render("~/Scripts/random")
</head>

<body>
    <div class="screen" style="height:100%; width: 100%">
        <div class="vertical-menu">
            <h4>Quick Search</h4>
            <div class="form-group">
                <label>Date: </label>
                <input class="form-control" id="datePicker" />
            </div>
            <div class="form-group">
                <label>Time Window Size(+/-): </label>
                <input id="minutes" value="10" class="form-control" />
            </div>
            <div class="form-group">
                <label>Time Window Units: </label>
                <select id="timeUnits" class="form-control">
                    <option value="7">Year</option>
                    <option value="6">Month</option>
                    <option value="5">Week</option>
                    <option value="4">Day</option>
                    <option value="3">Hour</option>
                    <option value="2" selected>Minute</option>
                    <option value="1">Second</option>
                    <option value="0">Millisecond</option>
                </select>
            </div>
            <div class="form-group">
                <label>Charts To Show: </label>
                <select id="charts" class="form-control" multiple>
                    <option value="Events" selected>Events</option>
                    <option value="Disturbances" selected>Disturbances</option>
                    <option value="Faults" selected>Faults</option>
                    <option value="Breakers" selected>Breakers</option>
                </select>
            </div>

            <div class="form-group">
                <button style="margin: 10px" class="btn btn-primary" onclick="apply()">Apply</button>
                <button class="btn btn-primary" onclick="openMultiNoteModalAll()">Add Notes</button>
            </div>
        </div>
        <div id="chartsDiv">
            <div style="display: inline-block" id="eventTable"></div>
            <div style="display: inline-block" id="disturbanceTable"></div>
            <div style="display: inline-block" id="faultTable"></div>
            <div style="display: inline-block" id="breakerTable"></div>
        </div>
    </div>


    <!-- Modals -->
    <div id="notesModal" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width: 50%">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Add a note to event record <span id="eventId"></span></h4>
                </div>
                <div id="previousNotesDiv">

                </div>
                <div class="modal-body">
                    <textarea wrap="hard" id="note" class="form-control"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="saveNote()">Add Note</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

    <div id="multiNotesModal" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width: 50%">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Add a note to associated event records</h4>
                </div>
                <div class="modal-body">
                    <textarea wrap="hard" id="multiNote" class="form-control"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="saveMultiNote()" data-dismiss="modal">Add Note</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>


    <div id="multiNotesModalAll" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width: 50%">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Add a note to all listed event records</h4>
                </div>
                <div class="modal-body">
                    <textarea wrap="hard" id="multiNoteAll" class="form-control"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="saveMultiNoteAll()" data-dismiss="modal">Add Note</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

    <script>

    var userId = "@HttpUtility.JavaScriptStringEncode(ViewBag.username)"
    var disabledList = $.jStorage.get('disabledList');
    var disabledArray = Object.keys(disabledList.Events).map(function(o){ if(!disabledList.Events[o]) return o}).filter(function(val) { return val !== undefined; });
    var json = [];

    $(document).ready(function () {
        $(window).on('hubConnected', function () {
            $('#datePicker').daterangepicker({
                timePicker: true,
                timePickerIncrement: 1,
                timePicker24Hour: true,
                timePickerSeconds: true,
                singleDatePicker: true,
                showDropdowns: true,
                locale: {
                    format: 'MM/DD/YYYY HH:mm:ss'
                }
            });
        })

    });

    function apply() {

        $('#chartsDiv').children().remove();

        $('#chartsDiv').append('<div style="display: inline-block" id="eventTable"></div>');
        $('#chartsDiv').append('<div style="display: inline-block" id="disturbanceTable"></div>');
        $('#chartsDiv').append('<div style="display: inline-block" id="faultTable"></div>');
        $('#chartsDiv').append('<div style="display: inline-block" id="breakerTable"></div>');

        $.each($('#charts').val(), function (i, value) {
            window['get' + value](moment.utc($("#datePicker").val(), "MM-DD-YYYY HH:mm:ss"), $('#minutes').val(), $('#timeUnits').val());
        })
    }
    var floatrenderer = function (row, columnfield, value, defaulthtml, columnproperties, rowdata) {

        return '<div style="text-align: center; margin-top: 5px;">' + parseFloat(value).toFixed(4) + "m" + '</div>';

    }

    var columnsrenderer = function (value) { return '<div style="text-align: center; margin-top: 5px;">' + value + '</div>'; };

    function getEvents(date, minuteWindow, timeUnits) {
        dataHub.getEvents(date, minuteWindow, timeUnits).done(function (data) {
            json = data;
            $.each(data, function (_, obj) {
                obj.voltage = Number(obj.voltage);
                obj.thecurrentdistance = Number(obj.thecurrentdistance);
            });


            $('#eventTable').puidatatable({
                scrollable: false,
                scrollHeight: '100%',
                scrollWidth: '100%',
                caption: 'Events',
                columns: [
                    { headerStyle: 'width: 40px', content: function (row) { return '<input type="checkbox" class="' + row.theeventid + '" checked />' } },
                    { field: 'theinceptiontime', headerText: 'Start Time', headerStyle: 'width: 30%', sortable: true, filter: true },
                    { field: 'theeventtype', headerText: 'Event Type', headerStyle: 'width: 9%', sortable: true, filter: true },
                    { field: 'thelinename', headerText: 'Line Name', headerStyle: 'width: 20%', sortable: true, filter: true },
                    { field: 'voltage', headerText: 'Line KV', headerStyle: 'width:  6%', sortable: true, filter: true },
                    { field: 'thefaulttype', headerText: 'Phase', headerStyle: 'width:  6%', sortable: true, filter: true },
                    { field: 'thecurrentdistance', headerText: 'Distance', headerStyle: 'width: 9%', sortable: true, filter: true },
                    { headerText: '', headerStyle: 'width: 4%', content: function (row) { return makeOpenSEEButton_html(row); } },
                    { headerText: '', headerStyle: 'width: 3%', content: function (row) { return makeNoteButton_html(row); } }
                ],
                datasource: data
            });

        });
    }

    function getDisturbances(date, minuteWindow, timeUnits) {
        dataHub.getDisturbances(date, minuteWindow, timeUnits).done(function (data) {
            json = data;

            $.each(json, function (_, obj) {
                obj.voltage = Number(obj.voltage);
                obj.thecurrentdistance = Number(obj.thecurrentdistance);
            });

            $.each(json, function (_, obj) {
                obj.voltage = Number(obj.voltage);
                obj.SeverityCode = Number(obj.SeverityCode);
                obj.magnitude = Number(obj.magnitude);
                obj.duration = Number(obj.duration);
            });

            $('#disturbanceTable').puidatatable({
                scrollable: false,
                scrollHeight: '100%',
                scrollWidth: '100%',
                sortMode: 'multiple',
                caption: 'Disturbances',
                sortMeta: [{ field: 'theinceptiontime', order: 1 }],
                columns: [
                    { headerStyle: 'width: 40px',content: function (row) { return '<input type="checkbox" class="' + row.theeventid + '" checked />' } },
                    { field: 'theinceptiontime', headerText: 'Start Time', headerStyle: 'width: 30%', sortable: true, filter: true},
                    { field: 'disturbancetype', headerText: 'Type', headerStyle: 'width: 9%', sortable: true, filter: true },
                    { field: 'thelinename', headerText: 'Line Name', headerStyle: 'width: 20%', sortable: true, filter: true },
                    { field: 'voltage', headerText: 'Line KV', headerStyle: 'width:  6%', sortable: true, filter: true },
                    { field: 'SeverityCode', headerText: 'Severity', headerStyle: 'width: 9%', sortable: true, filter: true },
                    { field: 'phase', headerText: 'Phase', headerStyle: 'width: 9%', sortable: true, filter: true },
                    { field: 'magnitude', headerText: 'Magnitude (pu)', headerStyle: 'width: 9%', sortable: true, filter: true },
                    { field: 'duration', headerText: 'Duration (s)', headerStyle: 'width: 9%', sortable: true, filter: true },
                    { headerText: '', headerStyle: 'width: 4%', content: function (row) { return makeOpenSEEButton_html(row); } },
                    { headerText: '', headerStyle: 'width: 3%', content: function (row) { return makeNoteButton_html(row); } }

                ],
                datasource: json
            });
        });

    }

    function getFaults(date, minuteWindow, timeUnits) {
        dataHub.getFaults(date, minuteWindow, timeUnits).done(function (data) {
            $.each(data, function (i, d) {
                d['theeventtype'] = "Fault";
                if (d.causecode !== undefined) includeCauseCode = true;
            });

            var columns = [];
            var includeCauseCode = false;

            columns.push(
                { headerStyle: 'width: 40px',content: function (row) { return '<input type="checkbox" class="' + row.theeventid + '" checked />' } },
                { field: 'theinceptiontime', headerText: 'Start Time', headerStyle: 'width: 15%', bodyStyle: 'width: 15%', bodyClass: '', sortable: true, filter: true }
            );

            columns.push({ field: 'thelinename', headerText: 'Line', headerStyle: 'width: 40%', bodyStyle: 'width: 40%', sortable: true, filter: true });

            if (includeCauseCode)
                columns.push({ field: 'causecode', headerText: 'Cause', headerStyle: 'width: 10%', bodyStyle: 'width: 10%', sortable: true, filter: true });

            columns.push({ field: 'voltage', headerText: 'kV', headerStyle: 'width: 6%', bodyStyle: 'width:  6%', sortable: true, filter: true });
            columns.push({ field: 'thefaulttype', headerText: 'Type', headerStyle: 'width:  6%', bodyStyle: 'width:  6%', sortable: true, filter: true });
            columns.push({ field: 'thecurrentdistance', headerText: 'Miles', headerStyle: 'width:  6%', bodyStyle: 'width:  6%', sortable: true, filter: true });
            columns.push({ field: 'locationname', headerText: 'Location', headerStyle: 'width: 10%', bodyStyle: 'width: 10%', sortable: true, filter: true });
            columns.push({ field: 'OpenSEE', headerText: '', headerStyle: 'width: 4%', bodyStyle: 'width: 4%', content: makeOpenSEEButton_html });
            columns.push({ field: 'FaultSpecifics', headerText: '', headerStyle: 'width: 4%', bodyStyle: 'width: 4%', content: makeFaultSpecificsButton_html });
            columns.push({ headerText: '', headerStyle: 'width: 3%', content: function (row) { return makeNoteButton_html(row); } });

            fixNumbers(data, ['voltage', 'thecurrentdistance']);

            $('#faultTable').puidatatable({
                scrollable: false,
                scrollHeight: '100%',
                columns: columns,
                caption: 'Faults',
                datasource: data
            });
        });

    }

    function getBreakers(date, minuteWindow, timeUnits) {
        dataHub.getBreakers(date, minuteWindow, timeUnits).done(function (data) {
            fixNumbers(data, ['timing', 'statustiming', 'speed']);
            $('#breakerTable').puidatatable({
                scrollable: true,
                scrollHeight: '100%',
                caption: 'Breakers',
                columns: [
                    { headerStyle: 'width: 40px',content: function (row) { return '<input type="checkbox" class="' + row.theeventid + '" checked />' } },
                    { field: 'energized', headerText: 'TCE Time', headerStyle: 'width: 140px', bodyStyle: 'width: 140px; height: 20px', sortable: true, filter: true },
                    { field: 'breakernumber', headerText: 'Breaker', headerStyle: 'width: 80px', bodyStyle: 'width: 80px; height: 20px', sortable: true, filter: true },
                    { field: 'linename', headerText: 'Line', headerStyle: 'width: auto', bodyStyle: 'width: auto; height: 20px', sortable: true, filter: true },
                    { field: 'phasename', headerText: 'Phase', headerStyle: 'width: 75px', bodyStyle: 'width: 75px; height: 20px', sortable: true, filter: true },
                    { field: 'timing', headerText: 'Timing', headerStyle: 'width: 80px', bodyStyle: 'width: 80px; height: 20px', sortable: true, filter: true },
                    { field: 'statustiming', headerText: 'Status Timing', headerStyle: 'width: 80px', bodyStyle: 'width: 80px; height: 20px', sortable: true, filter: true },
                    { field: 'speed', headerText: 'Speed', headerStyle: 'width: 75px', bodyStyle: 'width: 75px; height: 20px', sortable: true, filter: true },
                    { field: 'operationtype', headerText: 'Operation', headerStyle: 'width: 100px', bodyStyle: 'width: 100px; height: 20px', sortable: true, filter: true },
                    { field: 'OpenSEE', headerText: '', headerStyle: 'width: 50px', bodyStyle: 'width: 50px; padding: 0; height: 20px', content: makeOpenSEEButton_htmlBreaker },
                    { headerText: '', headerStyle: 'width: 3%', content: function (row) { return makeNoteButton_html(row); } }

                ],
                datasource: data
            });

        });
    }


    function makeOpenSEEButton_html(id) {
        var return_html = "";
        //return_html += '<div style="cursor: pointer;">';
        return_html += '<button onClick="OpenWindowToOpenSEE(' + id.theeventid + ');" title="Launch OpenSEE Waveform Viewer">';
        return_html += '<img src="@Html.Raw(Url.Content("~/Images/seeButton.png"))" /></button>';
        //return_html += '</div>';
        return (return_html);
    }

    function makeOpenSEEButton_htmlBreaker(id) {
        var return_html = "";
        //return_html += '<div style="cursor: pointer;">';
        return_html += '<button onClick="OpenWindowToOpenSEEBreaker(' + id.theeventid + ',' + id.breakeroperationid + ');" title="Launch OpenSEE Waveform Viewer">';
        return_html += '<img src="@Html.Raw(Url.Content("~/Images/seeButton.png"))" /></button>';
        //return_html += '</div>';
        return (return_html);
    }


    function makeFaultSpecificsButton_html(id) {
        var return_html = "";

        if (id.theeventtype == "Fault") {
            //return_html += '<div style="cursor: pointer;">';
            return_html += '<button onClick="OpenWindowToFaultSpecifics(' + id.theeventid + ');" title="Open Fault Detail Window">';
            return_html += '<img src="@Html.Raw(Url.Content("~/Images/faultDetailButton.png"))" /></button>';
            //return_html += '</div>';
        }
        return (return_html);
    }

    function OpenWindowToOpenSEE(id) {
        var popup = window.open("@Html.Raw(Url.Content("~/Main/OpenSEE"))" + "?eventid=" + id + "&faultcurves=1", id + "openSEE");
        return false;
    }

    function OpenWindowToOpenSEEBreaker(id, breaker) {
        var popup = window.open("@Html.Raw(Url.Content("~/Main/OpenSEE"))" + "?eventid=" + id + "&breakerdigitals=1" + "&breakeroperationid=" + breaker, id + "openSEE");
        return false;
    }

    function OpenWindowToFaultSpecifics(id) {
        var popup = window.open("@Html.Raw(Url.Content("~/FaultSpecifics.aspx"))?eventid=" + id, id + "FaultLocation", "left=0,top=0,status=no,resizable=yes,scrollbars=yes,toolbar=no,menubar=no,location=no");
        return false;
    }

    function makeNoteButton_html(id) {
        var return_html = "";
        return_html += '<button onclick="openNoteModal(' + id.theeventid + ')"><span  class="glyphicon glyphicon-pencil"></span><span style="color: green; position: sticky; bottom: 0">' + (id.Note > 0 ? '*' : '') +'</span></button>';
        return (return_html);
    }

    function fixNumbers(data, numFields) {
        if (data != null) {
            $.each(data, function (_, obj) {
                $.each(numFields, function (_, field) {
                    obj[field] = Number(obj[field]);
                });
            });
        }
    }


    function openNoteModal(eventId) {
        $('#previousNotes').remove();
        dataHub.getNotesForEvent(eventId).done(function (data) {
            $('#eventId').text(eventId);
            if (data.length > 0)
                $('#previousNotesDiv').append('<table id="previousNotes" class="table" ><tr><th style="width: 50%">Note</th><th style="width: 20%">Time</th><th style="width: 20%">User</th><th style="width: 10%"></th></tr></table>')
            $.each(data, function (i, d) {
                $('#previousNotes').append('<tr id="row' + d.ID + '"><td id="note' + d.ID + '" style="word-break:break-all;">' + d.Note + '</td><td>' + moment(d.TimeStamp).format("MM/DD/YYYY HH:mm:ss") + '</td><td>' + d.UserAccount + '</td><td><button onclick="editNote(' + d.ID + ')"><span class="glyphicon glyphicon-pencil" title="Edit this note.  Ensure you save after pushing this button or you will lose your note."></span></button><button onclick="removeNote(' + d.ID + ')"><span class="glyphicon glyphicon-remove" title="Remove this note"></span></button></td></tr>');
            });

            $('#note').val('');
            $('#notesModal').modal('show');
        });
    }

    function saveNote() {
        dataHub.saveNoteForEvent($('#eventId').text(), $('#note').val(), userId).done(function () {
            dataHub.getNotesForEvent($('#eventId').text()).done(function (data) {
                $('#previousNotes').remove();
                $('#noteCount').text(data.length);
                if (data.length > 0)
                    $('#previousNotesDiv').append('<table id="previousNotes" class="table" ><tr><th style="width: 50%">Note</th><th style="width: 20%">Time</th><th style="width: 20%">User</th><th style="width: 10%"></th></tr></table>')
                $.each(data, function (i, d) {
                    $('#previousNotes').append('<tr id="row' + d.ID + '"><td id="note' + d.ID + '" style="word-break:break-all;">' + d.Note + '</td><td>' + moment(d.TimeStamp).format("MM/DD/YYYY HH:mm:ss") + '</td><td>' + d.UserAccount + '</td><td><button onclick="editNote(' + d.ID + ')"><span class="glyphicon glyphicon-pencil" title="Edit this note.  Ensure you save after pushing this button or you will lose your note."></span></button><button onclick="removeNote(' + d.ID + ')"><span class="glyphicon glyphicon-remove" title="Remove this note"></span></button></td></tr>');
                });

                $('#note').val('');
                $('#notesModal').modal('show');
            });

        });
    }

    function removeNote(id) {
        dataHub.removeEventNote(id);
        $('#row' + id).remove();
        $('#noteCount').text(parseInt($('#noteCount').text()) - 1 );
    }

    function editNote(id) {
        $('#note').val($('#note' + id).text());
        dataHub.removeEventNote(id);
    }

    function openMultiNoteModal(eventId) {
            $('#eventId').text(eventId);
            $('#multiNote').val('');
            $('#multiNotesModal').modal('show');
    }

    function saveMultiNote() {
        dataHub.saveMultiNoteForEvent($('#eventId').text(), $('#multiNote').val(), userId);
    }


    function openMultiNoteModalAll() {
        $('#multiNoteAll').val('');
        $('#multiNotesModalAll').modal('show');
    }

    function saveMultiNoteAll() {
        dataHub.saveMultiNoteForAllEvents($.unique($('input[type=checkbox]:checked').toArray().map(function (x) { return $(x).attr('class') })), $('#multiNoteAll').val(), userId).done(function () {
            apply();
        });
    }

    </script>

</body>
</html>
