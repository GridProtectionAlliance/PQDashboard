@*//******************************************************************************************************
//  MeterEventsByLine.cshtml - Gbtc
//
//  Copyright © 2017, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/10/2017 - Billy Ernest
//       Generated original version of source code.
//
//*******************************************************************************************************@

@using System.Collections.Specialized
@using GSF.Data
@using GSF.Data.Model
@using GSF.Web.Model
@using PQDashboard.Model
@model AppModel
@{
    Layout = "";
    DataContext dataContext = Model.DataContext;

    NameValueCollection parameters = Request.QueryString;

    int postedEventId = int.Parse(parameters["eventid"] ?? "-1");
    EventView theEvent = dataContext.Table<EventView>().QueryRecords(restriction: new RecordRestriction("ID = {0}", postedEventId)).First();
    string xdaInstance = dataContext.Connection.ExecuteScalar<string>("SELECT Value FROM DashSettings WHERE Name = 'XDAInstance'");

}

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" style="height: 100%;">
<head id="Head1">
    <title>MeterEventsByLine</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <link rel="shortcut icon" type="image/ico" href="~/favicon.ico" />
    <link rel="stylesheet" href="~/Content/bootstrap/theme.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/font-awesome.css" />
    <link rel="stylesheet" href="~/Content/bootstrap-3.3.2.min.css" />
    <link rel="stylesheet" href="~/Content/themes/redmond/jquery-ui.css" />
    <link rel="stylesheet" href="~/Scripts/PrimeUI/primeui.min.css" />
    <link rel="stylesheet" href="~/Content/MeterEventsByLine.css" type="text/css" />

    <script type="text/javascript" src="~/Scripts/jquery-2.1.1.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.blockUI.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap-3.3.2.min.js"></script>
    <script type="text/javascript" src="~/Scripts/PrimeUI/primeui.js"></script>
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript" src="~/Scripts/Site.js"></script>

</head>

<body style="height: 100%;">
<div class="gridheader"><center>Events for @theEvent.MeterName for @theEvent.StartTime (<a href="@(xdaInstance + "/Workbench/MeterEventsByLine.cshtml?EventID=" + postedEventId)" target="_blank">View in OpenXDA</a>)</center>
</div>


<div style="height: 100%; width: 100%;">
    <div style="height: 100%; display: inline-block" id="MeterDetailsByDate"></div>
</div>

<script>

    var postedMeterId = "@theEvent.MeterID";
    var postedDate = "@theEvent.StartTime";
    var postedMeterName = "@theEvent.MeterName";


    $(document).ready(function () {    
        $(window).on('hubConnected', function () {
            populateMeterEventsDivWithGrid('getSiteLinesDetailsByDate', "MeterDetailsByDate", postedMeterName, postedMeterId, postedDate);
        })

    });

    var floatrenderer = function (row, columnfield, value, defaulthtml, columnproperties, rowdata) {

        return '<div style="text-align: center; margin-top: 5px;">' + parseFloat(value).toFixed(4) + "m" + '</div>';

    }

    var columnsrenderer = function (value) { return '<div style="text-align: center; margin-top: 5px;">' + value + '</div>'; };

    function populateMeterEventsDivWithGrid(thedatasource, thediv, siteName, siteID, theDate) {        
        dataHub.getSiteLinesDetailsByDate(siteID, theDate).done(function (data) {
            json = $.parseJSON(data);

            $.each(json, function (_, obj) {
                obj.thelinename = Number(obj.thelinename);
                obj.voltage = Number(obj.voltage);
                obj.thecurrentdistance = Number(obj.thecurrentdistance);
            });

            $('#' + thediv).puidatatable({
                scrollable: true,
                scrollHeight: '100%',
                scrollWidth: '100%',
                columns: [
                    {
                        field: 'theinceptiontime', headerText: 'Start Time', headerStyle: 'width: 30%', bodyStyle: 'width: 30%; height: 20px', sortable: true, content:
                          function (row) {
                              return "<a href='" + '@xdaInstance' + "/Workbench/Event.cshtml?EventID=" + row.theeventid + "' style='color: blue" + (row.UpdatedBy ? '; background-color: yellow' : '') + "' target='_blank' " + (row.UpdatedBy ? "title='This event has been edited.'" : "") + ">" + row.theinceptiontime + "</a>"
                          }
                    },
                    { field: 'theeventtype', headerText: 'Event Type', headerStyle: 'width: 20%', bodyStyle: 'width: 20%; height: 20px', sortable: true },
                    { field: 'thelinename', headerText: 'Line Name', headerStyle: 'width: 20%', bodyStyle: 'width:  20%; height: 20px', sortable: true },
                    { field: 'voltage', headerText: 'Line KV', headerStyle: 'width:  6%', bodyStyle: 'width:  6%; height: 20px', sortable: true },
                    { field: 'thefaulttype', headerText: 'Phase', headerStyle: 'width:  6%', bodyStyle: 'width:  6%; height: 20px', sortable: true },
                    { field: 'thecurrentdistance', headerText: 'Distance', headerStyle: 'width: 10%', bodyStyle: 'width: 10%; height: 20px', sortable: true },
                    {
                        headerText: '', headerStyle: 'width: 20%', content: function (row) {
                            var key = Object.keys(row).filter(function (a) {
                                return a !== 'thecurrentdistance' &&
                                        a !== 'theeventid' &&
                                        a !== 'theeventtype' &&
                                        a !== 'thefaulttype' &&
                                        a !== 'theinceptiontime' &&
                                        a !== 'thelineid' &&
                                        a !== 'thelinename' &&
                                        a !== 'pqiexists' &&
                                        a !== 'voltage' &&
                                        a !== 'UpdatedBy';
                            });
                            var html = "";

                            html += makeOpenSEEButton_html(row);

                            if (row.theeventtype == "Fault")
                                html += makeFaultSpecificsButton_html(row);
                            if (row.pqiexists !== '0')
                                html += makePQIButton_html(row);

                            $.each(key, function (i, k) {
                                if (row[k] !== '0')
                                    html += makeEASDetailsButton_html(row, row[k], k + '.aspx', '~/Images/' + k + '.png', 'Launch ' + k + ' Page', 300, 450);
                            });

                            return html;
                        }
                    }
                ],
                datasource: $.parseJSON(data)
            });

        });
    }

    function makeEASDetailsButton_html(row, value, url, imagepath, title, width, height) {
        var return_html = "";

        url += "?eventid=" + row.theeventid;

        if (value != "" && value != "0" && value != null) {

            //return_html += '<div style="cursor: pointer;">';
            return_html += '<button onClick="OpenWindowToEAS(' + "'" + url + "'" + "," + width + "," + height + ');"  title="' + title + '">';
            return_html += '<img src="' +imagepath + '" /></button>';
            //return_html += '</div>';
        }
        return (return_html);
    }


    function OpenWindowToEAS(url, width, height) {
        var popup = window.open(url, url, "left=0,top=0,width=" + width + ",height=" + height + ",status=no,resizable=yes,scrollbars=yes,toolbar=no,menubar=no,location=no");
        return false;
    }


    function makeOpenSEEButton_html(id) {
        var return_html = "";
        //return_html += '<div style="cursor: pointer;">';
        return_html += '<button onClick="OpenWindowToOpenSEE(' + id.theeventid + ');" title="Launch OpenSEE Waveform Viewer">';
        return_html += '<img src="@Html.Raw(Url.Content("~/Images/seeButton.png"))" /></button>';
        //return_html += '</div>';
        return (return_html);
    }

    function makeFaultSpecificsButton_html(id) {
        var return_html = "";

        if (id.theeventtype == "Fault") {
            //return_html += '<div style="cursor: pointer;">';
            return_html += '<button onClick="OpenWindowToFaultSpecifics(' + id.theeventid + ');" title="Open Fault Detail Window">';
            return_html += '<img src="@Html.Raw(Url.Content("~/Images/faultDetailButton.png"))" /></button>';
            //return_html += '</div>';
        }
        return (return_html);
    }

    function makePQIButton_html(id) {
        var return_html = "";

        if (id.pqiexists == "1") {
            //return_html += '<div style="cursor: pointer;">';
            return_html += '<button onClick="OpenWindowToPQI(' + id.theeventid + ');"title="Open PQI Window">';
            return_html += '<img src="@Html.Raw(Url.Content("~/Images/pqiButton.png"))" /></button>';
            //return_html += '</div>';
        }
        return (return_html);
    }

    function OpenWindowToOpenSEE(id) {
        var popup = window.open("@Html.Raw(Url.Content("~/Main/OpenSEE"))" + "?eventid=" + id + "&faultcurves=1", id + "openSEE");
        return false;
    }

    function OpenWindowToFaultSpecifics(id) {
        var popup = window.open("@Html.Raw(Url.Content("~/FaultSpecifics.aspx"))?eventid=" + id, id + "FaultLocation", "left=0,top=0,width=300,height=200,status=no,resizable=yes,scrollbars=yes,toolbar=no,menubar=no,location=no");
        return false;
    }

    function OpenWindowToPQI(id) {
        var popup = window.open("@Html.Raw(Url.Content("~/PQIByEvent.aspx"))?eventid=" + id, id + "PQI", "left=0,top=0,width=1024,height=768,status=no,resizable=yes,scrollbars=yes,toolbar=no,menubar=no,location=no");
        return false;
    }

</script>

</body>
</html>


